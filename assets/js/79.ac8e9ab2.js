(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{483:function(a,t,e){"use strict";e.r(t);var i=e(2),v=Object(i.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"写在前面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[a._v("#")]),a._v(" 写在前面")]),a._v(" "),t("p",[a._v("http 缓存，通过复用缓存资源，加快资源获取速度，减少了客户端等待时间和网络流量，同时也能缓解服务器端的压力，提高用户体验，提升网站性能。")]),a._v(" "),t("h2",{attrs:{id:"缓存分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存分类"}},[a._v("#")]),a._v(" 缓存分类")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("强缓存：强制使用缓存")])]),a._v(" "),t("li",[t("p",[a._v("协商缓存：和服务器协商确认这个缓存能不能用")])])]),a._v(" "),t("h2",{attrs:{id:"强缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[a._v("#")]),a._v(" 强缓存")]),a._v(" "),t("p",[a._v("不需要发送请求到服务端，直接读浏览器本地缓存，在 network 中显示的 HTTP 状态码是 200，在 chrome 中，强缓存又分为 Disk Cache(存放在硬盘中，一般存储脚本资源，如 css)和 Memory Cache(存放在内存中， 一般存储的有字体、图片、脚本)，存放位置由浏览器控制。")]),a._v(" "),t("p",[a._v("是否强缓存是由 Expires、Cache-Control 和 Prama 三个 Header 属性共同控制。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Expires\n规则：是一个日期，浏览器发起请求时，会根据系统时间和 Expires 的值进行比较。如果系统时间超过该值，则缓存失效。\n问题：当系统时间和服务器时间不一致，会有缓存期不准的可能。\n优先级： 最低。")])]),a._v(" "),t("li",[t("p",[a._v("Cache-Control\n常见的属性值")]),a._v(" "),t("ol",[t("li",[a._v("max-age： 单位是秒，缓存时间计算的方式是距离发起请求的秒数，超过这个秒数则缓存失败")]),a._v(" "),t("li",[a._v("no-cache：不使用强缓存")]),a._v(" "),t("li",[a._v("no-store：禁止使用缓存(包括协商缓存)")]),a._v(" "),t("li",[a._v("private: 专用于个人缓存，中间代理、cdn 等不能缓存此相映")]),a._v(" "),t("li",[a._v("public：响应可以被中间代理、cdn 等缓存")]),a._v(" "),t("li",[a._v("must-revalidate：在缓存过期前可以使用，过期后必须向服务器验证")])]),a._v(" "),t("p",[a._v("优先级：比 Expires 高")])]),a._v(" "),t("li",[t("p",[a._v("Pragama\n规则：只能设置 no-cache，不使用强缓存\n优先级：最高")])])]),a._v(" "),t("h2",{attrs:{id:"协商缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[a._v("#")]),a._v(" 协商缓存")]),a._v(" "),t("p",[a._v("协商缓存会先向服务器发送一个请求，服务器会根据这个请求头中是否设置了 If-Modified-Since 或者 If-None-Match 的时候命中协商缓存，如果命中，则返回 304 状态码，并且响应头会设置 Last-Modified 或者 ETag 属性， 通知浏览器从缓存中读取资源。")]),a._v(" "),t("ul",[t("li",[a._v("ETag/If-None-Match【优先级较高】")])]),a._v(" "),t("p",[a._v("属性值是一串 hash 码，代表资源的标识符，当服务端的文件变化时候，hash 码会随之改变，通过请求头中的 If-None-Match 和当前文件的 hash 值进行比较，如果相等则命中协商缓存。ETag 又有强弱校验之分，如果 hash 码以'W/'开头的一串字符串，说明此时协商缓存是弱校验，只有服务器上的文件差异(根据 ETag 计算方式来决定)达到触发 hash 值后缀变化的时候，才会真正请求资源，否则返回 304 并加载浏览器缓存。")]),a._v(" "),t("ul",[t("li",[a._v("Last-Modified/If-Modified-Since【性能优】\n属性值是日期时间，代表的是文件的最后修改时间，第一次请求服务端会把资源的最后修改时间放到 Last-Modified 响应头中，第二次发起请求的时候，请求头上会带上上一次的 Last-Modified 的时间，并放到 If-Modified-Since 请求头属性中，服务端根据文件最后一次修改时间和 If-Modified-Since 的值进行比较，如果相等，返回 304，并加载浏览器缓存。")])]),a._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),t("p",[a._v("图片、不常变化的 js 等静态资源使用缓存来提高页面加载速度。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/AprilTong/image/master/20231023184936.png",alt:"流程理解"}})]),a._v(" "),t("h2",{attrs:{id:"用户行为受浏览器缓存的控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户行为受浏览器缓存的控制"}},[a._v("#")]),a._v(" 用户行为受浏览器缓存的控制")]),a._v(" "),t("ul",[t("li",[a._v("地址栏访问\n正常用户行为，触发正常的浏览器缓存机制。")]),a._v(" "),t("li",[a._v("F5 刷新\n浏览器会设置 max-age 为 0，跳过强制缓存，进行协商缓存判断")]),a._v(" "),t("li",[a._v("ctrl+F5 强制刷新：\n跳过强缓存和协商缓存，直接从服务器拉取资源。")])])])}),[],!1,null,null,null);t.default=v.exports}}]);